openapi: "3.0.0"
info:
  title: "backend API"
  description: "backend API"
  version: "1.0.0"
servers:
  - url: "https://backend"
paths:
  /users:
    post:
      summary: "POST users"
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
    get:
      summary: "GET users"
      operationId: "findAllUsers"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /projects/{projectId}:
    put:
      summary: "PUT projects/{projectId}"
      operationId: "updateProject"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      summary: "DELETE projects/{projectId}"
      operationId: "deleteProject"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "204":
          description: "No Content"
    get:
      summary: "GET projects/{projectId}"
      operationId: "getProjectById"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Project"
  /projects:
    post:
      summary: "POST projects"
      operationId: "createProject"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProjectDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Project"
    get:
      summary: "GET projects"
      operationId: "getAllProjects"
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "3"
        - name: "sort"
          in: "query"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
            default: "id,desc"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ProjectDTO"
  /projects/{projectId}/expenses/{expenseId}:
    put:
      summary: "PUT projects/{projectId}/expenses/{expenseId}"
      operationId: "createProjectExpense"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "expenseId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectExpenseDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Project"
    delete:
      summary: "DELETE projects/{projectId}/expenses/{expenseId}"
      operationId: "deleteProjectExpense"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
        - name: "expenseId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "204":
          description: "No Content"
  /projects/{projectId}/expenses:
    post:
      summary: "POST projects/{projectId}/expenses"
      operationId: "createProjectExpense"
      parameters:
        - name: "projectId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectExpenseDTO"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Project"
components:
  schemas:
    CreateUserDTO:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        userName:
          type: "string"
    UserLoginData:
      type: "object"
      properties:
        userName:
          type: "string"
        email:
          type: "string"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    User:
      type: "object"
      properties:
        firstName:
          type: "string"
        lastName:
          type: "string"
        role:
          type: "string"
          enum:
            - "MANAGER"
            - "PROJECT_MANAGER"
            - "VOLUNTEER"
        userLoginData:
          $ref: "#/components/schemas/UserLoginData"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    ProjectDetailsDTO:
      type: "object"
      properties:
        description:
          type: "string"
        imagesFolderURL:
          type: "string"
    CreateProjectDTO:
      type: "object"
      properties:
        title:
          type: "string"
        minAge:
          type: "integer"
          format: "int32"
        maxAge:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
        location:
          type: "string"
        projectDetails:
          $ref: "#/components/schemas/ProjectDetailsDTO"
    ProjectDetails:
      type: "object"
      properties:
        description:
          type: "string"
        imagesFolderURL:
          type: "string"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    ProjectExpense:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        price:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    Project:
      type: "object"
      properties:
        title:
          type: "string"
        minAge:
          type: "integer"
          format: "int32"
        maxAge:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
        location:
          type: "string"
        projectDetails:
          $ref: "#/components/schemas/ProjectDetails"
        projectExpenses:
          type: "array"
          items:
            $ref: "#/components/schemas/ProjectExpense"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    ProjectDTO:
      type: "object"
      properties:
        title:
          type: "string"
        minAge:
          type: "integer"
          format: "int32"
        maxAge:
          type: "integer"
          format: "int32"
        price:
          type: "number"
          format: "double"
        location:
          type: "string"
        projectDetails:
          $ref: "#/components/schemas/ProjectDetails"
        id:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    ProjectExpenseDTO:
      type: "object"
      properties:
        name:
          type: "string"
        price:
          type: "integer"
          format: "int32"